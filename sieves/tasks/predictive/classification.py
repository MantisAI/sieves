from typing import Any, Callable, Iterable, Optional, TypeAlias

import outlines
from tasks import PredictiveTask

from sieves import Doc
from sieves.engines import Engine, EngineType
from sieves.engines.core import InferenceGenerator, Model, PromptSignature, Result
from sieves.engines.outlines_engine import Outlines

TaskPromptSignature: TypeAlias = list[str]


# TODO Resolve mypy error "Class cannot subclass value of type "Any"".
class Classification(PredictiveTask[TaskPromptSignature, Result, Model, InferenceGenerator]):  # type: ignore[misc]
    def __init__(
        self,
        labels: list[str],
        engine: Engine[PromptSignature, Result, Model, InferenceGenerator],
        task_id: Optional[str],
        show_progress: bool = True,
        include_meta: bool = True,
    ) -> None:
        """
        Initializes new PredictiveTask.
        :param labels: Labels to predict.
        :param task_id: Task ID.
        :param show_progress: Whether to show progress bar for processed documents.
        :param include_meta: Whether to include meta information generated by the task.
        """
        super().__init__(engine=engine, task_id=task_id, show_progress=show_progress, include_meta=include_meta)
        self._engine = engine
        self._prompt_signature = self._create_prompt_signature()
        self._labels = labels

    @property
    def supports(self) -> set[EngineType]:
        return {EngineType.outlines}

    @property
    def _inference_generator_factory(self) -> Callable[..., InferenceGenerator]:
        match self._engine:
            case Outlines():
                return lambda *args, **kwargs: outlines.generate.choice
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    @property
    def prompt_template(self) -> str:
        match self._engine:
            case Outlines():
                return f"""
                Classify the text after ### as one of the following options: {",".join(self._labels)}.
                ###
                {{{{ text }}}}
                """
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    def _create_prompt_signature(self) -> TaskPromptSignature:
        match self._engine:
            case Outlines():
                return self._labels
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    def _extract_from_docs(self, docs: Iterable[Doc]) -> Iterable[dict[str, Any]]:
        return ({"text": doc.text} for doc in docs)

    def _integrate_into_docs(self, results: Iterable[Result], docs: Iterable[Doc]) -> Iterable[Doc]:
        return docs
