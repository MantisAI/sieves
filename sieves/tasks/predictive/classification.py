from typing import Any, Iterable, Literal, Optional, TypeAlias

import dspy

from sieves.data import Doc
from sieves.engines import Engine, EngineType, dspy_engine, outlines_engine
from sieves.engines.core import InferenceMode, Model, PromptSignature, Result
from sieves.engines.dspy_engine import DSPy
from sieves.engines.outlines_engine import Outlines
from sieves.tasks.core import PredictiveTask

TaskPromptSignature: TypeAlias = list[str] | dspy_engine.PromptSignature
TaskInferenceMode: TypeAlias = outlines_engine.InferenceMode | dspy_engine.InferenceMode
TaskResult: TypeAlias = outlines_engine.Result | dspy_engine.Result


class Classification(PredictiveTask[TaskPromptSignature, TaskResult, Model, TaskInferenceMode]):
    def __init__(
        self,
        labels: list[str],
        engine: Engine[PromptSignature, Result, Model, InferenceMode],
        task_id: Optional[str] = None,
        show_progress: bool = True,
        include_meta: bool = True,
    ) -> None:
        """
        Initializes new PredictiveTask.
        :param labels: Labels to predict.
        :param task_id: Task ID.
        :param show_progress: Whether to show progress bar for processed documents.
        :param include_meta: Whether to include meta information generated by the task.
        """
        self._labels = labels
        self._engine = engine
        self._prompt_signature = self._create_prompt_signature()
        super().__init__(engine=engine, task_id=task_id, show_progress=show_progress, include_meta=include_meta)

    @property
    def supports(self) -> set[EngineType]:
        return {EngineType.outlines, EngineType.dspy}

    @property
    def _inference_mode(self) -> TaskInferenceMode:
        match self._engine:
            case Outlines():
                return outlines_engine.InferenceMode.choice
            case DSPy():
                return dspy_engine.InferenceMode.predict
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    @property
    def prompt_template(self) -> str:
        match self._engine:
            case Outlines():
                return f"""
                Classify the text after ======== as one or more of the following options: {",".join(self._labels)}. 
                Separate your choices with a comma.
                ========
                {{{{ text }}}}
                """
            case DSPy():
                return ""
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    def _create_prompt_signature(self) -> TaskPromptSignature:
        match self._engine:
            case Outlines():
                return self._labels
            case DSPy():
                labels = self._labels
                # Dynamically create Literal as output type.
                LabelType = Literal[*labels]  # type: ignore[valid-type]

                class TextClassification(dspy.Signature):  # type: ignore[misc]
                    text: str = dspy.InputField()
                    labels: LabelType = dspy.OutputField()

                return TextClassification
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    def _extract_from_docs(self, docs: Iterable[Doc]) -> Iterable[dict[str, Any]]:
        # todo Remove slicing once we have chunking support.
        match self._engine:
            case Outlines():
                return ({"text": doc.text[:256] if doc.text else None} for doc in docs)
            case DSPy():
                return ({"text": doc.text[:256] if doc.text else None} for doc in docs)
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

    def _integrate_into_docs(self, results: Iterable[TaskResult], docs: Iterable[Doc]) -> Iterable[Doc]:
        match self._engine:
            # mypy ignore[union-attr] directives are due to mypy not understanding properties of Union types (such as
            # TaskResult) properly.
            case Outlines():
                for doc, result in zip(docs, results):
                    doc.results[self.id] = result.split(",")  # type: ignore[union-attr]
            case DSPy():
                for doc, result in zip(docs, results):
                    doc.results[self.id] = result.completions.labels  # type: ignore[union-attr]
            case _:
                raise ValueError(f"Unsupported engine type: {type(self._engine)}")

        return docs
