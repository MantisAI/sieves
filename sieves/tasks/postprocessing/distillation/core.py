from collections.abc import Iterable
from pathlib import Path
from typing import Any

from tasks import PredictiveTask

from sieves import Doc
from sieves.tasks import Task
from sieves.tasks.postprocessing.distillation.types import DistillationFramework


class Distillation(Task):
    """Distills pipeline results into specialized models."""

    def __init__(
        self,
        target_task_id: str,
        framework: DistillationFramework,
        training_kwargs: dict[str, Any],
        model_path: Path | str,
        task_id: str | None = None,
        show_progress: bool = True,
        include_meta: bool = False,
    ):
        """Initializes a distillation task.
        :param target_task_id: ID of task whose results to distill.
        :param task_id: Task ID.
        :param show_progress: Whether to show progress bar for processed documents
        :param include_meta: Whether to include meta information generated by the task.
        """
        super().__init__(task_id=task_id, show_progress=show_progress, include_meta=include_meta)

        self._target_task_id = target_task_id
        self._framework = framework
        self._training_kwargs = training_kwargs
        self._model_path = Path(model_path)

        self._target_task_type: type[PredictiveTask] | None = None

    @property
    def target_task_id(self) -> str:
        """Get target task ID.
        :return: Target task ID.
        """
        return self._target_task_id

    @property
    def target_task_type(self) -> type[PredictiveTask] | None:
        """Get target task type.
        :return: Type of target task.
        """
        return self._target_task_type

    @target_task_type.setter
    def target_task_type(self, value: type[PredictiveTask]) -> None:
        """Set target task type.
        :param value: Target task type.
        """
        self._target_task_type = value

    def __call__(self, docs: Iterable[Doc]) -> Iterable[Doc]:
        """Distill results in docs for specified target task into local model. This will train and save a model in line
        with the arguments specified at task initialization time.

        :param docs: Docs with results to distill.
        :return: Unchanged documents.
        :raises ValueError: If `target_task_type` hasn't been set yet.
        """
        assert self._target_task_type, ValueError("`target_task_type` has to be set before running distillation.")

        yield from docs

    @property
    def _state(self) -> dict[str, Any]:
        return {
            **super()._state,
            "target_task_id": self._target_task_id,
            "framework": self._framework,
            "training_kwargs": self._training_kwargs,
            "model_path": str(self._model_path),
        }
